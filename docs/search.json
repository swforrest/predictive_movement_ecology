[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "case_study.html",
    "href": "case_study.html",
    "title": "Case Study",
    "section": "",
    "text": "The tabs on the left navigate to different components of the case study."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Predictive Movement Ecology",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "ssf_responses.html",
    "href": "ssf_responses.html",
    "title": "SSF responses",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\npackages &lt;- c(\"amt\", \"sf\", \"terra\", \"RColorBrewer\", \"mgcv\", \"gratia\")\nwalk(packages, require, character.only = T)"
  },
  {
    "objectID": "ssf_responses.html#plot-the-data-spatially",
    "href": "ssf_responses.html#plot-the-data-spatially",
    "title": "SSF responses",
    "section": "Plot the data spatially",
    "text": "Plot the data spatially\n\n\nCode\nbuffalo_all %&gt;%\n  ggplot(aes(x = x_, y = y_, colour = id)) +\n  geom_point(alpha = 0.5, size = 0.1) + \n  coord_fixed() +\n  scale_x_continuous(\"Easting (m)\") +\n  scale_y_continuous(\"Northing (m)\") +\n  scale_colour_viridis_d() +\n  theme_classic() +\n  theme(legend.position = \"none\") \n\n\n\n\n\n\n\n\n\nCode\n# ggsave(\"outputs/data_prep/buffalo_djelk_map.png\",\n#        width = 150, height = 150, units = \"mm\",  dpi = 600)"
  },
  {
    "objectID": "ssf_responses.html#pick-out-a-single-individual",
    "href": "ssf_responses.html#pick-out-a-single-individual",
    "title": "SSF responses",
    "section": "Pick out a single individual",
    "text": "Pick out a single individual\n\n\nCode\nbuffalo_id &lt;- buffalo_all %&gt;% filter(id == \"2014\")\n\nbuffalo_id %&gt;%\n  ggplot(aes(x = x_, y = y_, colour = t_)) +\n  geom_point(alpha = 0.5, size = 0.1) + \n  coord_fixed() +\n  scale_x_continuous(\"Easting (m)\") +\n  scale_y_continuous(\"Northing (m)\") +\n  theme_classic()"
  },
  {
    "objectID": "ssf_responses.html#sample-random-steps-to-fit-models",
    "href": "ssf_responses.html#sample-random-steps-to-fit-models",
    "title": "SSF responses",
    "section": "Sample random steps to fit models",
    "text": "Sample random steps to fit models\n\n\nCode\nbuffalo_id_steps &lt;- buffalo_id %&gt;% \n  steps()\n\n# fitting step length and turning angle distributions to all locations\ngamma_dist &lt;- fit_distr(buffalo_id_steps$sl_, \"gamma\")\nvonmises_dist &lt;- fit_distr(buffalo_id_steps$ta_, \"vonmises\")\n\n# movement parameters\ngamma_dist$params$shape\n\n\n[1] 0.3452605\n\n\nCode\ngamma_dist$params$scale\n\n\n[1] 1023.96\n\n\nCode\nvonmises_dist$params$kappa\n\n\n[1] 0.0483029\n\n\nCode\nvonmises_dist$params$mu\n\n\nCircular Data: \nType = angles \nUnits = radians \nTemplate = none \nModulo = asis \nZero = 0 \nRotation = counter \n[1] 0\n\n\nCode\n# sample random steps\nbuffalo_ssf_data &lt;- buffalo_id_steps %&gt;% \n  random_steps(n = 10, \n                sl_dist = gamma_dist, \n                ta_dist = vonmises_dist) %&gt;%\n  mutate(log_sl = log(sl_),\n         cos_ta = cos(ta_)) %&gt;%\n  extract_covariates(ndvi)"
  },
  {
    "objectID": "ssf_responses.html#linear-covariate",
    "href": "ssf_responses.html#linear-covariate",
    "title": "SSF responses",
    "section": "Linear covariate",
    "text": "Linear covariate\n\nModel formula\n\\(y \\sim ndvi\\)\n\n\nFit model\n\n\nCode\n# fit an issf model\nssf_linear &lt;- amt::fit_issf(case_ ~ \n                              ndvi + \n                              sl_ + log_sl + cos_ta +\n                              strata(step_id_),\n                            data = buffalo_ssf_data)\n\nsummary(ssf_linear)\n\n\nCall:\ncoxph(formula = Surv(rep(1, 72270L), case_) ~ ndvi + sl_ + log_sl + \n    cos_ta + strata(step_id_), data = data, method = \"exact\")\n\n  n= 72270, number of events= 6570 \n\n             coef  exp(coef)   se(coef)      z Pr(&gt;|z|)  \nndvi   -4.525e-01  6.361e-01  2.081e-01 -2.174   0.0297 *\nsl_     1.161e-05  1.000e+00  2.496e-05  0.465   0.6418  \nlog_sl  8.098e-04  1.001e+00  5.191e-03  0.156   0.8760  \ncos_ta -1.292e-02  9.872e-01  1.827e-02 -0.707   0.4794  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n       exp(coef) exp(-coef) lower .95 upper .95\nndvi      0.6361     1.5722    0.4230    0.9565\nsl_       1.0000     1.0000    1.0000    1.0001\nlog_sl    1.0008     0.9992    0.9907    1.0110\ncos_ta    0.9872     1.0130    0.9524    1.0231\n\nConcordance= 0.502  (se = 0.004 )\nLikelihood ratio test= 5.59  on 4 df,   p=0.2\nWald test            = 5.6  on 4 df,   p=0.2\nScore (logrank) test = 5.6  on 4 df,   p=0.2\n\n\n\n\nResponse curve\n\n\nCode\n# extract the NDVI coefficient\nndvi_coef &lt;- ssf_linear$model$coefficients[1]\n\n# calculate the RSS for each NDVI value\nndvi_coef_df &lt;- data.frame(ndvi_values, \n                 \"log_rss\" = ndvi_values * ndvi_coef,\n                 \"rss\" = exp(ndvi_values * ndvi_coef))\n\n# plot the response curve\nggplot() +\n  geom_hline(yintercept = 1, linetype = \"dashed\", colour = \"grey\") +\n  geom_line(data = ndvi_coef_df, aes(x = ndvi_values, y = rss), \n            colour = \"black\", size = 1) +\n  labs(x = \"NDVI\", y = \"RSS\") +\n  theme_classic() \n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nâ„¹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\n\nPlot habitat selection\n\n\nCode\n# calculate the RSS for the local NDVI values\nndvi_linear &lt;- exp(ndvi_window * ndvi_coef)\n\n# plot the habitat selection (spatial RSS)\nplot(ndvi_linear, main = \"RSS - linear coefficient\")"
  },
  {
    "objectID": "ssf_responses.html#quadratic-covariate",
    "href": "ssf_responses.html#quadratic-covariate",
    "title": "SSF responses",
    "section": "Quadratic covariate",
    "text": "Quadratic covariate\n\nModel formula\n\\(y \\sim ndvi + ndvi^2\\)\n\n\nFit model\n\n\nCode\n# fit an issf model\nssf_quadratic &lt;- amt::fit_issf(case_ ~ \n                                 ndvi + I(ndvi^2) + \n                                 sl_ + log_sl + cos_ta +\n                              strata(step_id_),\n                            data = buffalo_ssf_data)\n\nsummary(ssf_quadratic)\n\n\nCall:\ncoxph(formula = Surv(rep(1, 72270L), case_) ~ ndvi + I(ndvi^2) + \n    sl_ + log_sl + cos_ta + strata(step_id_), data = data, method = \"exact\")\n\n  n= 72270, number of events= 6570 \n\n                coef  exp(coef)   se(coef)      z Pr(&gt;|z|)  \nndvi       1.310e+00  3.708e+00  9.293e-01  1.410   0.1585  \nI(ndvi^2) -2.909e+00  5.453e-02  1.496e+00 -1.945   0.0518 .\nsl_        1.086e-05  1.000e+00  2.497e-05  0.435   0.6635  \nlog_sl     8.897e-04  1.001e+00  5.192e-03  0.171   0.8639  \ncos_ta    -1.289e-02  9.872e-01  1.827e-02 -0.706   0.4803  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n          exp(coef) exp(-coef) lower .95 upper .95\nndvi        3.70795     0.2697  0.599987    22.915\nI(ndvi^2)   0.05453    18.3387  0.002907     1.023\nsl_         1.00001     1.0000  0.999962     1.000\nlog_sl      1.00089     0.9991  0.990757     1.011\ncos_ta      0.98719     1.0130  0.952465     1.023\n\nConcordance= 0.508  (se = 0.004 )\nLikelihood ratio test= 9.42  on 5 df,   p=0.09\nWald test            = 9.27  on 5 df,   p=0.1\nScore (logrank) test = 9.27  on 5 df,   p=0.1\n\n\n\n\nResponse curve\n\n\nCode\n# extract the NDVI coefficient\nndvi_coef &lt;- ssf_quadratic$model$coefficients[1]\nndvi_coef_sq &lt;- ssf_quadratic$model$coefficients[2]\n\nlog_rss = (ndvi_values * ndvi_coef) + (ndvi_values^2 * ndvi_coef_sq)\nrss = exp(log_rss)\n\n# calculate the RSS for each NDVI value\nndvi_coef_df &lt;- data.frame(ndvi_values, log_rss, rss)\n\n# plot the response curve\nggplot() +\n  geom_hline(yintercept = 1, linetype = \"dashed\", colour = \"grey\") +\n  geom_line(data = ndvi_coef_df, aes(x = ndvi_values, y = rss), \n            colour = \"black\", size = 1) +\n  labs(x = \"NDVI\", y = \"RSS\") +\n  theme_classic() \n\n\n\n\n\n\n\n\n\n\n\nPlot habitat selection\n\n\nCode\n# calculate the RSS for the local NDVI values\nndvi_quadratic &lt;- exp((ndvi_window * ndvi_coef) + \n                        (ndvi_window^2 * ndvi_coef_sq))\n\n# plot the habitat selection (spatial RSS)\nplot(ndvi_quadratic, main = \"RSS - quadratic coefficient\")"
  },
  {
    "objectID": "ssf_responses.html#smooth-term",
    "href": "ssf_responses.html#smooth-term",
    "title": "SSF responses",
    "section": "Smooth term",
    "text": "Smooth term\nFit a GAM to the data, with a smooth term across the range of NDVI values (Klappstein et al. 2024).\n\nModel formula\n\\(y \\sim s(ndvi)\\)\n\n\nFit model\n\n\nCode\n# create a dummy variable create a dummy column for times (used in a Cox PH model, but not relevant to an SSF) that all contain the same value.\nbuffalo_ssf_data$times &lt;- 1 # dummy time variable\n\n# fit an issf model\nssf_gam &lt;- mgcv::gam(cbind(times, step_id_) ~ \n                       # s(ndvi, bs = \"tp\", k = 10) +\n                       s(ndvi) +\n                       sl_ + log_sl + cos_ta,\n                            data = buffalo_ssf_data,\n                            family = cox.ph,\n                            weight = case_)\n\nsummary(ssf_gam)\n\n\n\nFamily: Cox PH \nLink function: identity \n\nFormula:\ncbind(times, step_id_) ~ s(ndvi) + sl_ + log_sl + cos_ta\n\nParametric coefficients:\n         Estimate Std. Error z value Pr(&gt;|z|)\nsl_     1.065e-05  2.500e-05   0.426    0.670\nlog_sl  2.152e-03  5.208e-03   0.413    0.680\ncos_ta -1.357e-02  1.827e-02  -0.743    0.458\n\nApproximate significance of smooth terms:\n          edf Ref.df Chi.sq p-value    \ns(ndvi) 7.825  8.577  64.73  &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nDeviance explained = 0.114%\n-REML =  15754  Scale est. = 1         n = 72270\n\n\nCode\n# coef(ssf_gam)[4]\n\ngam_smooths &lt;- smooth_estimates(ssf_gam)\n\n\n\n\nResponse curve\n\n\nCode\ngratia::draw(ssf_gam, rug = FALSE) + \n  geom_hline(yintercept = 0, linetype = \"dashed\", colour = \"grey\") +\n  labs(x = \"NDVI\", y = \"log-RSS\") +\n  scale_x_continuous(limits = c(ndvi_quantiles[1], 0.5)) +\n  scale_y_continuous(limits = c(-0.4, 0.4)) +\n  theme_classic() \n\n\nWarning: Removed 42 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = gam_smooths) + \n  geom_hline(yintercept = 1, linetype = \"dashed\", colour = \"grey\") +\n  geom_ribbon(aes(x = ndvi, ymin = exp(.estimate - 1.96 * .se), ymax = exp(.estimate + 1.96 * .se)), \n              fill = \"grey70\", alpha = 0.5) +\n  geom_line(aes(x = ndvi, y = exp(.estimate)), \n            colour = \"black\") +\n  labs(x = \"NDVI\", y = \"RSS\") +\n  scale_x_continuous(limits = c(ndvi_quantiles[1], 0.5)) +\n  scale_y_continuous(limits = c(0.5, 1.5)) +\n  theme_classic() \n\n\nWarning: Removed 42 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\n\n\nPlot habitat selection\n\n\nCode\npredicted_log_rss &lt;- predict(ssf_gam, \n                         newdata = data.frame(ndvi = values(ndvi_window), \n                                              sl_ = 0,\n                                              log_sl = 0, \n                                              cos_ta = 0), \n                       type = \"link\")\n\nndvi_gam &lt;- ndvi_window\nvalues(ndvi_gam) &lt;- exp(as.vector(predicted_log_rss))\n\n# Plot the predictions\nplot(ndvi_gam, main = \"RSS - smooth term\")"
  }
]