{
  "hash": "6bf15744bdd3888063f5dcb29111f897",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"SSF responses\"\nauthor: \"Scott Forrest\"\ndate: \"2025-08-22\"\nexecute: \n  cache: false\nbibliography: paperpile.bib\ntoc: true\nnumber-sections: false\nformat: \n  html:\n    # self-contained: true\n    code-fold: show\n    code-tools: true\n    df-print: paged\n    code-line-numbers: true\n    code-overflow: scroll\n    fig-format: png\n    fig-dpi: 300\n  pdf:\n    geometry: \n      - top=30mm\n      - left=30mm\neditor:\n  source\nabstract: |\n  In this script we demonstrate different approaches to including covariates in an SSF model. \n---\n\n\n\n\n# Load required packages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\npackages <- c(\"amt\", \"sf\", \"terra\", \"RColorBrewer\", \"mgcv\", \"gratia\")\nwalk(packages, require, character.only = T)\n```\n:::\n\n\n\n\n# Import data and clean\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffalo_data <- read_csv(\"data/buffalo.csv\") \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\nRows: 133161 Columns: 11\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(2): node, dates dbl (7): ...1, lat, lon, height, accuracy, heading, speed dttm\n(2): timestamp, DateTime\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n```\n\n\n:::\n\n```{.r .cell-code}\n# remove individuals that have poor data quality or less than about 3 months of data. \n# The \"2014.GPS_COMPACT copy.csv\" string is a duplicate of ID 2024, so we exclude it\nbuffalo_data <- buffalo_data %>% filter(!node %in% c(\"2014.GPS_COMPACT copy.csv\", \n                                           2029, 2043, 2265, 2284, 2346))\n\nbuffalo_data <- buffalo_data %>%  \n  group_by(node) %>% \n  arrange(DateTime, .by_group = T) %>% \n  distinct(DateTime, .keep_all = T) %>% \n  arrange(node) %>% \n  mutate(ID = node)\n\nbuffalo_clean <- buffalo_data[, c(12, 2, 4, 3)]\ncolnames(buffalo_clean) <- c(\"id\", \"time\", \"lon\", \"lat\")\nattr(buffalo_clean$time, \"tzone\") <- \"Australia/Queensland\"\nhead(buffalo_clean)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"time\"],\"name\":[2],\"type\":[\"dttm\"],\"align\":[\"right\"]},{\"label\":[\"lon\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"lat\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"2005\",\"2\":\"2018-07-25 10:04:02.050139\",\"3\":\"134.3780\",\"4\":\"-12.30136\"},{\"1\":\"2005\",\"2\":\"2018-07-25 11:04:23.050139\",\"3\":\"134.3782\",\"4\":\"-12.29955\"},{\"1\":\"2005\",\"2\":\"2018-07-25 12:04:39.050139\",\"3\":\"134.3778\",\"4\":\"-12.29940\"},{\"1\":\"2005\",\"2\":\"2018-07-25 13:04:17.050873\",\"3\":\"134.3765\",\"4\":\"-12.29893\"},{\"1\":\"2005\",\"2\":\"2018-07-25 14:04:39.050873\",\"3\":\"134.3770\",\"4\":\"-12.29924\"},{\"1\":\"2005\",\"2\":\"2018-07-25 15:04:27.050873\",\"3\":\"134.3754\",\"4\":\"-12.29897\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\ntz(buffalo_clean$time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Australia/Queensland\"\n```\n\n\n:::\n\n```{.r .cell-code}\nbuffalo_ids <- unique(buffalo_clean$id)\n```\n:::\n\n\n\n\n# Create a step object \n\nUse the `amt` package to create a trajectory object from the cleaned data. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Create a trajectory object\"}\nbuffalo_all <- buffalo_clean %>% mk_track(id = id,\n                                           lon,\n                                           lat, \n                                           time, \n                                           all_cols = T,\n                                           crs = 4326) %>% \n  transform_coords(crs_to = 3112, crs_from = 4326) # Transformation to GDA94 / \n# Geoscience Australia Lambert (https://epsg.io/3112)\n```\n:::\n\n\n\n\n## Plot the data spatially\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffalo_all %>%\n  ggplot(aes(x = x_, y = y_, colour = id)) +\n  geom_point(alpha = 0.5, size = 0.1) + \n  coord_fixed() +\n  scale_x_continuous(\"Easting (m)\") +\n  scale_y_continuous(\"Northing (m)\") +\n  scale_colour_viridis_d() +\n  theme_classic() +\n  theme(legend.position = \"none\") \n```\n\n::: {.cell-output-display}\n![](ssf_responses_files/figure-html/unnamed-chunk-3-1.png)\n:::\n\n```{.r .cell-code}\n# ggsave(\"outputs/data_prep/buffalo_djelk_map.png\",\n#        width = 150, height = 150, units = \"mm\",  dpi = 600)\n```\n:::\n\n\n\n\n## Pick out a single individual\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffalo_id <- buffalo_all %>% filter(id == \"2014\")\n\nbuffalo_id %>%\n  ggplot(aes(x = x_, y = y_, colour = t_)) +\n  geom_point(alpha = 0.5, size = 0.1) + \n  coord_fixed() +\n  scale_x_continuous(\"Easting (m)\") +\n  scale_y_continuous(\"Northing (m)\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](ssf_responses_files/figure-html/unnamed-chunk-4-1.png)\n:::\n:::\n\n\n\n\n# Import spatial covariate\n\nAlthough NDVI changes over time, and we have access to monthly layers, we will just select a single month here.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nndvi <- rast(\"mapping/ndvi_aug_2018.tif\")\nplot(ndvi, main = \"NDVI August 2018\")\npoints(buffalo_id$x_, buffalo_id$y_, col = \"red\", pch = 16, cex = 0.5)\n```\n\n::: {.cell-output-display}\n![](ssf_responses_files/figure-html/unnamed-chunk-5-1.png)\n:::\n\n```{.r .cell-code}\nndvi\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 2280, 2400, 1  (nrow, ncol, nlyr)\nresolution  : 25, 25  (x, y)\nextent      : 0, 60000, -1463000, -1406000  (xmin, xmax, ymin, ymax)\ncoord. ref. : GDA94 / Geoscience Australia Lambert (EPSG:3112) \nsource      : ndvi_aug_2018.tif \nname        :       ndvi \nmin value   : -0.5441047 \nmax value   :  0.8086554 \n```\n\n\n:::\n:::\n\n\n\n\n# Select local extent\n\nWe just want to look at an area centred on a single location, which might be combined with our movement probability surface to generate a next-step probability surface.\n\nWe'll centre the extent on an interesting looking part of the landscape, and then buffer it by 1500m, which contains most of the step lengths, and therefore most of the movement kernel.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffalo_single_point <- buffalo_id %>% \n  filter(t_ == min(t_)) # select the first time point\n\nbuffer <- 1512.5 # buffer in metres\n\nwindow_extent <- ext(buffalo_single_point$x_ - buffer, \n                        buffalo_single_point$x_ + buffer, \n                        buffalo_single_point$y_ - buffer, \n                        buffalo_single_point$y_ + buffer)\n\nndvi_window <- crop(ndvi, window_extent)\n\n# set the extent to 0 at the buffalo location\nndvi_window <- shift(ndvi_window, \n                    dx = -buffalo_single_point$x_, \n                    dy = -buffalo_single_point$y_)\n\n# plot the NDVI layer with the buffalo location as the centre point\nplot(ndvi_window, main = \"NDVI - local extent\",\n     col = brewer.pal(9, \"Greens\"))\npoints(x = 0, y = 0, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](ssf_responses_files/figure-html/unnamed-chunk-6-1.png)\n:::\n\n```{.r .cell-code}\n# create a NDVI df to plot with ggplot\nndvi_df <- as.data.frame(ndvi_window, xy = TRUE) \n\nggplot() +\n  geom_raster(data = ndvi_df, aes(x = x, y = y, fill = as.factor(cut(ndvi, breaks = 9)))) +\n  scale_fill_brewer(palette = \"Greens\", direction = 1) +\n  coord_fixed() +\n  geom_point(aes(x = 0, y = 0), \n             colour = \"red\", size = 0.5) +\n  labs(x = \"Easting (m)\", y = \"Northing (m)\", fill = \"NDVI\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](ssf_responses_files/figure-html/unnamed-chunk-6-2.png)\n:::\n:::\n\n\n\n\n## Sample random steps to fit models\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffalo_id_steps <- buffalo_id %>% \n  steps()\n\n# fitting step length and turning angle distributions to all locations\ngamma_dist <- fit_distr(buffalo_id_steps$sl_, \"gamma\")\nvonmises_dist <- fit_distr(buffalo_id_steps$ta_, \"vonmises\")\n\n# movement parameters\ngamma_dist$params$shape\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3452605\n```\n\n\n:::\n\n```{.r .cell-code}\ngamma_dist$params$scale\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1023.96\n```\n\n\n:::\n\n```{.r .cell-code}\nvonmises_dist$params$kappa\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.0483029\n```\n\n\n:::\n\n```{.r .cell-code}\nvonmises_dist$params$mu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCircular Data: \nType = angles \nUnits = radians \nTemplate = none \nModulo = asis \nZero = 0 \nRotation = counter \n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\n# sample random steps\nbuffalo_ssf_data <- buffalo_id_steps %>% \n  random_steps(n = 10, \n                sl_dist = gamma_dist, \n                ta_dist = vonmises_dist) %>%\n  mutate(log_sl = log(sl_),\n         cos_ta = cos(ta_)) %>%\n  extract_covariates(ndvi) \n```\n:::\n\n\n\n\n# Different SSF formulations\n\nFirstly, we want to pull out the range of NDVI values to plot the curves with.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# histogram of NDVI values\nhist(values(ndvi))\n```\n\n::: {.cell-output-display}\n![](ssf_responses_files/figure-html/unnamed-chunk-8-1.png)\n:::\n\n```{.r .cell-code}\n# 1% and 99% quantiles of NDVI values\nndvi_quantiles <- quantile(values(ndvi), probs = c(0.01, 0.99), na.rm = TRUE)\nndvi_quantiles\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        1%        99% \n0.09036818 0.68761911 \n```\n\n\n:::\n\n```{.r .cell-code}\n# plot across the range in the local window\nndvi_values <- seq(ndvi_quantiles[1], \n                   ndvi_quantiles[2], \n                   length.out = 100)\n```\n:::\n\n\n\n\n## Linear covariate\n\n### Model formula\n\n$y \\sim ndvi$\n\n### Fit model\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fit an issf model\nssf_linear <- amt::fit_issf(case_ ~ \n                              ndvi + \n                              sl_ + log_sl + cos_ta +\n                              strata(step_id_),\n                            data = buffalo_ssf_data)\n\nsummary(ssf_linear)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = Surv(rep(1, 72270L), case_) ~ ndvi + sl_ + log_sl + \n    cos_ta + strata(step_id_), data = data, method = \"exact\")\n\n  n= 72270, number of events= 6570 \n\n             coef  exp(coef)   se(coef)      z Pr(>|z|)  \nndvi   -4.525e-01  6.361e-01  2.081e-01 -2.174   0.0297 *\nsl_     1.161e-05  1.000e+00  2.496e-05  0.465   0.6418  \nlog_sl  8.098e-04  1.001e+00  5.191e-03  0.156   0.8760  \ncos_ta -1.292e-02  9.872e-01  1.827e-02 -0.707   0.4794  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n       exp(coef) exp(-coef) lower .95 upper .95\nndvi      0.6361     1.5722    0.4230    0.9565\nsl_       1.0000     1.0000    1.0000    1.0001\nlog_sl    1.0008     0.9992    0.9907    1.0110\ncos_ta    0.9872     1.0130    0.9524    1.0231\n\nConcordance= 0.502  (se = 0.004 )\nLikelihood ratio test= 5.59  on 4 df,   p=0.2\nWald test            = 5.6  on 4 df,   p=0.2\nScore (logrank) test = 5.6  on 4 df,   p=0.2\n```\n\n\n:::\n:::\n\n\n\n\n### Response curve\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract the NDVI coefficient\nndvi_coef <- ssf_linear$model$coefficients[1]\n\n# calculate the RSS for each NDVI value\nndvi_coef_df <- data.frame(ndvi_values, \n                 \"log_rss\" = ndvi_values * ndvi_coef,\n                 \"rss\" = exp(ndvi_values * ndvi_coef))\n\n# plot the response curve\nggplot() +\n  geom_hline(yintercept = 1, linetype = \"dashed\", colour = \"grey\") +\n  geom_line(data = ndvi_coef_df, aes(x = ndvi_values, y = rss), \n            colour = \"black\", size = 1) +\n  labs(x = \"NDVI\", y = \"RSS\") +\n  theme_classic() \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ssf_responses_files/figure-html/unnamed-chunk-10-1.png)\n:::\n:::\n\n\n\n\n### Plot habitat selection\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculate the RSS for the local NDVI values\nndvi_linear <- exp(ndvi_window * ndvi_coef)\n\n# plot the habitat selection (spatial RSS)\nplot(ndvi_linear, main = \"RSS - linear coefficient\")\n```\n\n::: {.cell-output-display}\n![](ssf_responses_files/figure-html/unnamed-chunk-11-1.png)\n:::\n:::\n\n\n\n\n## Quadratic covariate\n\n### Model formula\n\n$y \\sim ndvi + ndvi^2$\n\n### Fit model\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fit an issf model\nssf_quadratic <- amt::fit_issf(case_ ~ \n                                 ndvi + I(ndvi^2) + \n                                 sl_ + log_sl + cos_ta +\n                              strata(step_id_),\n                            data = buffalo_ssf_data)\n\nsummary(ssf_quadratic)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\ncoxph(formula = Surv(rep(1, 72270L), case_) ~ ndvi + I(ndvi^2) + \n    sl_ + log_sl + cos_ta + strata(step_id_), data = data, method = \"exact\")\n\n  n= 72270, number of events= 6570 \n\n                coef  exp(coef)   se(coef)      z Pr(>|z|)  \nndvi       1.310e+00  3.708e+00  9.293e-01  1.410   0.1585  \nI(ndvi^2) -2.909e+00  5.453e-02  1.496e+00 -1.945   0.0518 .\nsl_        1.086e-05  1.000e+00  2.497e-05  0.435   0.6635  \nlog_sl     8.897e-04  1.001e+00  5.192e-03  0.171   0.8639  \ncos_ta    -1.289e-02  9.872e-01  1.827e-02 -0.706   0.4803  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n          exp(coef) exp(-coef) lower .95 upper .95\nndvi        3.70795     0.2697  0.599987    22.915\nI(ndvi^2)   0.05453    18.3387  0.002907     1.023\nsl_         1.00001     1.0000  0.999962     1.000\nlog_sl      1.00089     0.9991  0.990757     1.011\ncos_ta      0.98719     1.0130  0.952465     1.023\n\nConcordance= 0.508  (se = 0.004 )\nLikelihood ratio test= 9.42  on 5 df,   p=0.09\nWald test            = 9.27  on 5 df,   p=0.1\nScore (logrank) test = 9.27  on 5 df,   p=0.1\n```\n\n\n:::\n:::\n\n\n\n\n### Response curve\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract the NDVI coefficient\nndvi_coef <- ssf_quadratic$model$coefficients[1]\nndvi_coef_sq <- ssf_quadratic$model$coefficients[2]\n\nlog_rss = (ndvi_values * ndvi_coef) + (ndvi_values^2 * ndvi_coef_sq)\nrss = exp(log_rss)\n\n# calculate the RSS for each NDVI value\nndvi_coef_df <- data.frame(ndvi_values, log_rss, rss)\n\n# plot the response curve\nggplot() +\n  geom_hline(yintercept = 1, linetype = \"dashed\", colour = \"grey\") +\n  geom_line(data = ndvi_coef_df, aes(x = ndvi_values, y = rss), \n            colour = \"black\", size = 1) +\n  labs(x = \"NDVI\", y = \"RSS\") +\n  theme_classic() \n```\n\n::: {.cell-output-display}\n![](ssf_responses_files/figure-html/unnamed-chunk-13-1.png)\n:::\n:::\n\n\n\n\n### Plot habitat selection\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculate the RSS for the local NDVI values\nndvi_quadratic <- exp((ndvi_window * ndvi_coef) + \n                        (ndvi_window^2 * ndvi_coef_sq))\n\n# plot the habitat selection (spatial RSS)\nplot(ndvi_quadratic, main = \"RSS - quadratic coefficient\")\n```\n\n::: {.cell-output-display}\n![](ssf_responses_files/figure-html/unnamed-chunk-14-1.png)\n:::\n:::\n\n\n\n\n## Smooth term\n\nFit a GAM to the data, with a smooth term across the range of NDVI values [@Klappstein2024-ax].\n\n### Model formula\n\n$y \\sim s(ndvi)$\n\n### Fit model\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a dummy variable create a dummy column for times (used in a Cox PH model, but not relevant to an SSF) that all contain the same value.\nbuffalo_ssf_data$times <- 1 # dummy time variable\n\n# fit an issf model\nssf_gam <- mgcv::gam(cbind(times, step_id_) ~ \n                       # s(ndvi, bs = \"tp\", k = 10) +\n                       s(ndvi) +\n                       sl_ + log_sl + cos_ta,\n                            data = buffalo_ssf_data,\n                            family = cox.ph,\n                            weight = case_)\n\nsummary(ssf_gam)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFamily: Cox PH \nLink function: identity \n\nFormula:\ncbind(times, step_id_) ~ s(ndvi) + sl_ + log_sl + cos_ta\n\nParametric coefficients:\n         Estimate Std. Error z value Pr(>|z|)\nsl_     1.065e-05  2.500e-05   0.426    0.670\nlog_sl  2.152e-03  5.208e-03   0.413    0.680\ncos_ta -1.357e-02  1.827e-02  -0.743    0.458\n\nApproximate significance of smooth terms:\n          edf Ref.df Chi.sq p-value    \ns(ndvi) 7.825  8.577  64.73  <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nDeviance explained = 0.114%\n-REML =  15754  Scale est. = 1         n = 72270\n```\n\n\n:::\n\n```{.r .cell-code}\n# coef(ssf_gam)[4]\n\ngam_smooths <- smooth_estimates(ssf_gam)\n```\n:::\n\n\n\n\n### Response curve\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngratia::draw(ssf_gam, rug = FALSE) + \n  geom_hline(yintercept = 0, linetype = \"dashed\", colour = \"grey\") +\n  labs(x = \"NDVI\", y = \"log-RSS\") +\n  scale_x_continuous(limits = c(ndvi_quantiles[1], 0.5)) +\n  scale_y_continuous(limits = c(-0.4, 0.4)) +\n  theme_classic() \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 42 rows containing missing values or values outside the scale range\n(`geom_line()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ssf_responses_files/figure-html/unnamed-chunk-16-1.png)\n:::\n\n```{.r .cell-code}\nggplot(data = gam_smooths) + \n  geom_hline(yintercept = 1, linetype = \"dashed\", colour = \"grey\") +\n  geom_ribbon(aes(x = ndvi, ymin = exp(.estimate - 1.96 * .se), ymax = exp(.estimate + 1.96 * .se)), \n              fill = \"grey70\", alpha = 0.5) +\n  geom_line(aes(x = ndvi, y = exp(.estimate)), \n            colour = \"black\") +\n  labs(x = \"NDVI\", y = \"RSS\") +\n  scale_x_continuous(limits = c(ndvi_quantiles[1], 0.5)) +\n  scale_y_continuous(limits = c(0.5, 1.5)) +\n  theme_classic() \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 42 rows containing missing values or values outside the scale range\n(`geom_line()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ssf_responses_files/figure-html/unnamed-chunk-16-2.png)\n:::\n:::\n\n\n\n\n### Plot habitat selection\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredicted_log_rss <- predict(ssf_gam, \n                         newdata = data.frame(ndvi = values(ndvi_window), \n                                              sl_ = 0,\n                                              log_sl = 0, \n                                              cos_ta = 0), \n                       type = \"link\")\n\nndvi_gam <- ndvi_window\nvalues(ndvi_gam) <- exp(as.vector(predicted_log_rss))\n\n# Plot the predictions\nplot(ndvi_gam, main = \"RSS - smooth term\")\n```\n\n::: {.cell-output-display}\n![](ssf_responses_files/figure-html/unnamed-chunk-17-1.png)\n:::\n:::",
    "supporting": [
      "ssf_responses_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}